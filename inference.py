from diffusers import DDPMPipeline
import torch
from PIL import Image
import gradio as gr

# Load the model from your local directory
pipeline = DDPMPipeline.from_pretrained("ddpm-faces-128/full_data_ema_long/best_model")

# Optional: move to GPU if available
pipeline = pipeline.to("cuda")

def my_make_grid(images, rows, cols):
    """ 
    Makes a grid of images generated by the trained model
    """
    w, h = images[0].size
    grid = Image.new('RGB', size=(cols*w, rows*h))
    for i, image in enumerate(images):
        grid.paste(image, box=(i%cols*w, i//cols*h))
    return grid


def img_sampling(steps, nbr_of_images):
    """Sampling images from ddpm model 
    Args:
        steps (int): Number of steps the noise removing model runs
        nbr_of_images (int): Number of images to generate 

    Yields:
        _type_: _description_
    """
    
    imgs = pipeline(
            batch_size = nbr_of_images,
            num_inference_steps=steps,
            generator=torch.manual_seed(42),
        ).images

    if nbr_of_images == 1:
        yield imgs[0]
    elif nbr_of_images%2 == 0:
        image_grid = my_make_grid(imgs, int(nbr_of_images/2), 2)
        yield image_grid
    else:
        image_grid = my_make_grid(imgs, int((nbr_of_images+1)/2), 2)
        yield image_grid

# Generate Gradio interface
demo = gr.Interface(
    img_sampling, 
    [
        gr.Slider(minimum=20, maximum=150, value=50, step=10), 
        gr.Slider(minimum=1, maximum=9, value=1, step=1.0, info="Number of images to generate")
    ], 
    outputs="image",
    title="Face generation DDPM model", 
    theme=gr.themes.Glass(primary_hue="emerald",secondary_hue="stone",)

)

if __name__ == "__main__":
    demo.launch(server_port=7861, share=True)